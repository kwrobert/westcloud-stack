#####################################################################################################
# Script: cluster_network.yaml
# Author: Kyle Robertson
# Date: September 18, 2015
# Company: Worlcom Exchange Inc.
# Description: A HEAT template that deploys the networking resources for the autoscale_cluster_yaml
# stack
#####################################################################################################

heat_template_version: 2018-08-31
description: Homogenous compute cluster

parameters:
    network_name:
      type: string
      label: Network Name
      description: A short, descriptive name for the network of this computing cluster
      constraints:
        - allowed_pattern: "^[A-Za-z]+[a-zA-Z0-9_-]*$"
    subnet_cidr:
      type: string
      label: Internal Subnet CIDR
      description: "The CIDR of the subnet instances will connect to. Ex: 10.20.30.0/24"
      constraints:
        - allowed_pattern: "^[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+$"    
    external_network:
      type: string
      label: External Network Name
      description: The name of the external network where floating IP's for environment exist
      default: net04_ext
    # source_cidr:
    #   type: string
    #   label: Source network CIDR
    #   description: The name of the source network where all traffic to the headnodes will be coming from
    #   constraints:
    #     - allowed_pattern: "^[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+$"
          
resources:
   compute_network:
     type: OS::Neutron::Net
     properties:
       name: {get_param: network_name}

   compute_network_subnet:
     type: OS::Neutron::Subnet
     properties:
       network_id: { get_resource: compute_network }
       cidr: {get_param: subnet_cidr}
       dns_nameservers: [ "8.8.8.8", "8.8.4.4" ]
       ip_version: 4

   compute_router:
     type: OS::Neutron::Router
     properties:
       external_gateway_info: { network: {get_param: external_network} }

   internal_interface:
     type: OS::Neutron::RouterInterface
     properties:
       router_id: { get_resource: compute_router }
       subnet: { get_resource: compute_network_subnet }
       
   cluster_sec_group:
     type: OS::Neutron::SecurityGroup
     properties:
       name: 
         str_replace:
           template: network-name-sec-group
           params:
             network-name: {get_param: network_name}
       rules: 
         # Allow nodes to talk to one another on all ports and protocols inbound, leaving remote_group_id
         # blank defaults to group ID of this security group
         - {"protocol": tcp, "direction": ingress, "port_range_min": 1, "port_range_max": 65535,  "remote_mode": remote_group_id}
         - {"protocol": udp, "direction": ingress, "port_range_min": 1, "port_range_max": 65535,  "remote_mode": remote_group_id}
         - {"protocol": icmp, "direction": ingress,"remote_mode": remote_group_id}
         # Ingress to SSH from all
         - {"protocol": tcp,"direction": ingress, "port_range_min": 22, "port_range_max": 22,"remote_mode": remote_ip_prefix,"remote_ip_prefix": 0.0.0.0/0}
         # Egress to all
         - {"protocol": icmp,"direction":egress,"remote_mode": remote_ip_prefix,"remote_ip_prefix": 0.0.0.0/0}
         - {"protocol": tcp,"direction":egress,"remote_mode": remote_ip_prefix,"remote_ip_prefix": 0.0.0.0/0}
         - {"protocol": udp,"direction":egress,"remote_mode": remote_ip_prefix,"remote_ip_prefix": 0.0.0.0/0}
              
outputs:
    compute_net:
      value: {get_resource: compute_network}
    compute_net_subnet:
      value: {get_resource: compute_network_subnet}
    cluster_sec_group: 
      value: {get_resource: cluster_sec_group}
